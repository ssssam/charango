Charango 0.3.0 - design
------------------------

See README for an introduction to Charango.


Key design decisions
--------------------

* Ontologies are part of the application itself. They are not user data, but code
  that happens to be read at runtime and could support dynamic patching. Similar
  to GtkBuilder .ui files and GSetting schemas. Notes:
    - this is basically how Tracker works. "Ontologies are API" is how they
      describe it.
    - when communicating with other applications, things become a bit more messy.
      Tracker eases the problem a lot because essentially all users of the tracker
      store agree on an ontology and it can be depended on for API.
    - I don't think we need to support communication with other applications that
      don't want to standardise within Tracker. I hope it's never necessary :)
    - the upshot of this is when properties are not found or type mismatches occur,
      we can use warning() instead of having to report exceptions everywhere.

* Ontologies should be usable in all formats - I want prototyping to be easy. To
  this end, Charango requires an INDEX file in each ontology directory, so it can
  match URI's to filenames and prefixes without having to do any RDF parsing (and
  some ontologies aren't very helpful in describing themselves anyway). A user
  must 'require' certain ontologies (which brings in all their dependencies), so
  a big collection can be managed without every application having to load everything
  in memory.

* Advanced storage is out of scope. That's Tracker's business.

* Complex aggregation of data sources is out of scope. I'd love to provide a
  consistent interface between different RDF stores and endpoints .. but how
  many of those do you need? You certainly don't want to pretend they're all
  the same and run SPARQL queries across them because it could take DAYS to
  execute!

Internal design
----------------

No premature optimisation. I'm aware we waste time comparing and parsing
strings repeatedly. At least the code is clear and not scattered with
conversions between Rdf.Uri, Rdf.Node, Charango.Uri and whatever.

Context:
	* Stores all known ontology data so that we can index it. Addressing
	  ontology resources by integer id's is vital when querying tens of
	  thousands of resources to build a view.
	  
	* Ontologies cannot change during execution. Charango is for desktop
	  applications and ontologies are essentially API, which does not normally
	  change during runtime.

	* Ontology info can only be read from disk. This is probably necessary for
	  applications to provide any stability guarantees. In practice apps should
	  ship their required ontologies or depend on Tracker's.


Charango refers to concepts by integer id's rather than URI whenever possible.
The following indexing schemes exist:

	* Entity ID's (per class): each classed resource has its own
	  numbering system, so any entity can be identified as for example
	  mo:Artist?15.
	* Property ID's (per class): any rdfs:Property that is set for a class
	  is indexed within the class, and this is how the value slot is
	  identified.
	* Type ID's (global): all Rdfs classes share this number space. Note
	  that the Xsd literal types and derivations are themselves Rdfs
	  classes.
	  FIXME: is this any use?

Ontology sources
----------------

How easy is it to add new ontologies to Tracker?

Tracker run-time extension of ontologies is PLANNED:
  http://www.mail-archive.com/tracker-list@gnome.org/msg05852.html
but currently only possible at install-time. I guess when Charango connects to
Tracker it needs to check if all ontologies are available then, and in future
it would be able to add them at runtime. Of course getting Music Ontology
included would be cool but not sure if they will do this :) If not, Calliope
will be able to install it itself at least.


Value storage
-------------

GValue is used to store property values, inside a GValueArray. There is
a fair amount of memory wasted - each value takes up 24 bytes, when most
are simply storing pointers (4 or 8 bytes). There are a few gains - int64
and double values can be stored inline on all platforms which saves a
memory dereference. Additionally the GType system can be reused to identify
the value type being stored - either CharangoEntityType, or one of
G_TYPE_STRING, G_TYPE_INT64 etc.


Error handling
--------------

Ontologies are really API. One important consequence is that any errors
encountered in parsing and processing the ontology data is a programmer
error, not a user error.


Non-controversial things that nontheless aren't specified as part of RDF
------------------------------------------------------------------------

One ontology <-> one file <-> one namespace


Code design decisions
---------------------

* I'm fine with hardcoding URI's to concepts. If the OWL namespace ever
  changes, we have bigger problems than search and replacing a few strings ...
