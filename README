Charango 0.3.0
--------------

Charango is a GObject library that provides an object oriented RDF data
model & view. Although it is not tied to a specific data store, it is
intended to be used with Tracker.

RDF is a way of storing information about resources, in the form
subject/predicate/object. Normally, the resources are classed and so the
data can be mapped on top the standard instance/property/value model.
This provides a simple and intuitive way of working with the data.

See DESIGN for more information.


Philosophical Q & A
-------------------

* Why is Charango a good ORM, and not dumb like the Ruby one?
  => ActiveRecord, like most ORM's, is dumb because:
     - it exposes all sorts of state: new records, read-only records,
       select_all which for some reason returns just ids, partial reads
       where you then have a record which only has some fields filled, etc.
     - the query interface is basically SQL made slightly more complicated. The
       abstraction gains almost nothing (they say compatibility between db's, but
       since it's only complicated things where they're incompatible and only
       simple things that are wrapped, that's a non-starter)
     - inefficient: lots of ways to read everything from the db and then discard
       most of it
     - storing properties as class members/methods is fun and sexy, but results in
       ugly namespace classes so in practice it's not a very good idea.
  => Charango is different.
     - happy to coexist with SPARQL, rather than pretend it does not exist.
     - simply an optional layer on top of the existing store so that things that
       act like objects are treated as such
     - transactional access only, so less inefficiencies, no confusion over locking,
     - views run at a lower level if possible
     - it's basically a convenience layer
     - possibility of making it more efficient; for example the initial Tracker
       implementation will query objects using SPARQL which is then rewritten as
       SQL and then converted to VM code before actually returning the objects.
       Hopefully you can link into tracker and at least avoid the SPARQL layer.
